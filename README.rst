Tracking a memory leak
======================

mtrace function and mtrace perl tool ("man 3 mtrace") shipped with glibc
is useful only with single threaded applications. The hook is removed
while logging an alloc/free message. Any allocations/frees in this time
window will not have the hook, so they will not be logged!

Developed a library that replaces malloc, free and friends with its own
functions and logs alloc/free messages to dump files that are safe with
threaded programs.

Steps to track memory leak
===========================

#. Get the source (git clone https://github.com/malahal/mmleak)
    - mmleak.c, Makefile to produce mmleak.so library
    - mmleak.py to shrink the dump files generated by the mmleak.so
      library
    - mmleak-panda.py to produce an HTML output by taking a list of
      allocations that are not freed (**needs other python modules!**)
    - mmleak-install.py to modify systemd nfs-ganesha service unit file,
      should only be used to track memory leaks with **NFS-Ganesha
      server!**

#. cd mmleak && make
#. Put the above generated "mmleak.so" library in /root
#. Use "LD_PRELOAD=/root/mmleak.so <your-program> [program-options]" to
   start your application. You can use "MMLEAK_DIR=/what/ever/path" env
   to place the dump files into the given directory.
#. mmleak.so will generate dump files into /tmp with /tmp/mmleak.<PID>.<NUM>.out
#. The files generated will be big as it dumps all allocations and
   frees. Use mmleak.py to shrink the matching allocations and frees
   as below:

       - For each dumpfile::

          sort -s -k1,1 <dump-file> | mmleak.py > <dump-file>.shrinked

       - cat <all shrinked files in order> | sort -s -k1,1 | mmleak.py > mmleak.<PID>.txt

       - You can feed mmleak.<PID>.txt through mmleak-panda script to get
         an HTML output::

          awk 'NF==3' mmleak.<PID>.txt | mmleak-panda.py > mmleak.<PID>.html

#. mmleak.so will also save /proc/<PID>/maps file as /tmp/mmleak.<PID>.maps.
   You need this to translate hex addresses to source line numbers.
   All function addresses will be in hex. Use "eu-addr2line" to get the
   leak line numbers::

     eu-addr2line -M mmleak.<PID>.maps addr1 [addr2 ...]
